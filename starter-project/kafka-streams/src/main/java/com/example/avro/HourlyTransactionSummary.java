/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class HourlyTransactionSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5014736583774724335L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HourlyTransactionSummary\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"user_id\",\"type\":\"int\"},{\"name\":\"hour\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"transaction_count\",\"type\":\"int\"},{\"name\":\"transaction_total_amount\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HourlyTransactionSummary> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HourlyTransactionSummary> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<HourlyTransactionSummary> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<HourlyTransactionSummary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<HourlyTransactionSummary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this HourlyTransactionSummary to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a HourlyTransactionSummary from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a HourlyTransactionSummary instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static HourlyTransactionSummary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int user_id;
  private java.lang.String hour;
  private int transaction_count;
  private double transaction_total_amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HourlyTransactionSummary() {}

  /**
   * All-args constructor.
   * @param user_id The new value for user_id
   * @param hour The new value for hour
   * @param transaction_count The new value for transaction_count
   * @param transaction_total_amount The new value for transaction_total_amount
   */
  public HourlyTransactionSummary(java.lang.Integer user_id, java.lang.String hour, java.lang.Integer transaction_count, java.lang.Double transaction_total_amount) {
    this.user_id = user_id;
    this.hour = hour;
    this.transaction_count = transaction_count;
    this.transaction_total_amount = transaction_total_amount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user_id;
    case 1: return hour;
    case 2: return transaction_count;
    case 3: return transaction_total_amount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user_id = (java.lang.Integer)value$; break;
    case 1: hour = value$ != null ? value$.toString() : null; break;
    case 2: transaction_count = (java.lang.Integer)value$; break;
    case 3: transaction_total_amount = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public int getUserId() {
    return user_id;
  }



  /**
   * Gets the value of the 'hour' field.
   * @return The value of the 'hour' field.
   */
  public java.lang.String getHour() {
    return hour;
  }



  /**
   * Gets the value of the 'transaction_count' field.
   * @return The value of the 'transaction_count' field.
   */
  public int getTransactionCount() {
    return transaction_count;
  }



  /**
   * Gets the value of the 'transaction_total_amount' field.
   * @return The value of the 'transaction_total_amount' field.
   */
  public double getTransactionTotalAmount() {
    return transaction_total_amount;
  }



  /**
   * Creates a new HourlyTransactionSummary RecordBuilder.
   * @return A new HourlyTransactionSummary RecordBuilder
   */
  public static com.example.avro.HourlyTransactionSummary.Builder newBuilder() {
    return new com.example.avro.HourlyTransactionSummary.Builder();
  }

  /**
   * Creates a new HourlyTransactionSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HourlyTransactionSummary RecordBuilder
   */
  public static com.example.avro.HourlyTransactionSummary.Builder newBuilder(com.example.avro.HourlyTransactionSummary.Builder other) {
    if (other == null) {
      return new com.example.avro.HourlyTransactionSummary.Builder();
    } else {
      return new com.example.avro.HourlyTransactionSummary.Builder(other);
    }
  }

  /**
   * Creates a new HourlyTransactionSummary RecordBuilder by copying an existing HourlyTransactionSummary instance.
   * @param other The existing instance to copy.
   * @return A new HourlyTransactionSummary RecordBuilder
   */
  public static com.example.avro.HourlyTransactionSummary.Builder newBuilder(com.example.avro.HourlyTransactionSummary other) {
    if (other == null) {
      return new com.example.avro.HourlyTransactionSummary.Builder();
    } else {
      return new com.example.avro.HourlyTransactionSummary.Builder(other);
    }
  }

  /**
   * RecordBuilder for HourlyTransactionSummary instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HourlyTransactionSummary>
    implements org.apache.avro.data.RecordBuilder<HourlyTransactionSummary> {

    private int user_id;
    private java.lang.String hour;
    private int transaction_count;
    private double transaction_total_amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.HourlyTransactionSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.hour)) {
        this.hour = data().deepCopy(fields()[1].schema(), other.hour);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[2].schema(), other.transaction_count);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.transaction_total_amount)) {
        this.transaction_total_amount = data().deepCopy(fields()[3].schema(), other.transaction_total_amount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing HourlyTransactionSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.HourlyTransactionSummary other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.user_id)) {
        this.user_id = data().deepCopy(fields()[0].schema(), other.user_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.hour)) {
        this.hour = data().deepCopy(fields()[1].schema(), other.hour);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transaction_count)) {
        this.transaction_count = data().deepCopy(fields()[2].schema(), other.transaction_count);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.transaction_total_amount)) {
        this.transaction_total_amount = data().deepCopy(fields()[3].schema(), other.transaction_total_amount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public int getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder setUserId(int value) {
      validate(fields()[0], value);
      this.user_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder clearUserId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'hour' field.
      * @return The value.
      */
    public java.lang.String getHour() {
      return hour;
    }


    /**
      * Sets the value of the 'hour' field.
      * @param value The value of 'hour'.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder setHour(java.lang.String value) {
      validate(fields()[1], value);
      this.hour = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'hour' field has been set.
      * @return True if the 'hour' field has been set, false otherwise.
      */
    public boolean hasHour() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'hour' field.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder clearHour() {
      hour = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_count' field.
      * @return The value.
      */
    public int getTransactionCount() {
      return transaction_count;
    }


    /**
      * Sets the value of the 'transaction_count' field.
      * @param value The value of 'transaction_count'.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder setTransactionCount(int value) {
      validate(fields()[2], value);
      this.transaction_count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_count' field has been set.
      * @return True if the 'transaction_count' field has been set, false otherwise.
      */
    public boolean hasTransactionCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transaction_count' field.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder clearTransactionCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_total_amount' field.
      * @return The value.
      */
    public double getTransactionTotalAmount() {
      return transaction_total_amount;
    }


    /**
      * Sets the value of the 'transaction_total_amount' field.
      * @param value The value of 'transaction_total_amount'.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder setTransactionTotalAmount(double value) {
      validate(fields()[3], value);
      this.transaction_total_amount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_total_amount' field has been set.
      * @return True if the 'transaction_total_amount' field has been set, false otherwise.
      */
    public boolean hasTransactionTotalAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'transaction_total_amount' field.
      * @return This builder.
      */
    public com.example.avro.HourlyTransactionSummary.Builder clearTransactionTotalAmount() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HourlyTransactionSummary build() {
      try {
        HourlyTransactionSummary record = new HourlyTransactionSummary();
        record.user_id = fieldSetFlags()[0] ? this.user_id : (java.lang.Integer) defaultValue(fields()[0]);
        record.hour = fieldSetFlags()[1] ? this.hour : (java.lang.String) defaultValue(fields()[1]);
        record.transaction_count = fieldSetFlags()[2] ? this.transaction_count : (java.lang.Integer) defaultValue(fields()[2]);
        record.transaction_total_amount = fieldSetFlags()[3] ? this.transaction_total_amount : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HourlyTransactionSummary>
    WRITER$ = (org.apache.avro.io.DatumWriter<HourlyTransactionSummary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HourlyTransactionSummary>
    READER$ = (org.apache.avro.io.DatumReader<HourlyTransactionSummary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.user_id);

    out.writeString(this.hour);

    out.writeInt(this.transaction_count);

    out.writeDouble(this.transaction_total_amount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.user_id = in.readInt();

      this.hour = in.readString();

      this.transaction_count = in.readInt();

      this.transaction_total_amount = in.readDouble();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.user_id = in.readInt();
          break;

        case 1:
          this.hour = in.readString();
          break;

        case 2:
          this.transaction_count = in.readInt();
          break;

        case 3:
          this.transaction_total_amount = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










